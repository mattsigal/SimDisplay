# GENERATE MODEL OUTCOME SELECTOR:
output$mod_outcome <- renderUI({
selectizeInput(inputId = "mod_outcome",
label = "Outcome Variables",
choices = input$response,
selected = NULL,
multiple = TRUE)
})
# GENERATE REDUCED DATA TABLE:
dat_subset <- reactive({
# SUBSET DATA COLUMNS BY DESIGN/META INPUTS
if (input$meta){
df <- dat[, c(input$design, input$response, mvars, "int7rn4l1d"), drop = FALSE]
if (class(df$SIM_TIME) == "numeric"){
df$SIM_TIME <- round(df$SIM_TIME, 2)
}
} else df <- dat[, c(input$design, input$response, "int7rn4l1d"), drop = FALSE]
# SUBSET DATA BY ROWS AND MERGE
for (i in 1:length(input$design)){
if(!is.null(input[[input$design[[i]]]])){
dfs <- lapply(input$design, function(d) {
df[df[[d]] %in% input[[d]],]
})
if (length(dfs) > 1){
df <- Reduce(function(...) merge(..., all=FALSE), dfs)
} else df <- dfs[[1]]
}
# SORT DATA BY INTERNALID (default)
df <- df[order(df$int7rn4l1d),]
return(df)
})
## RENDER OUTPUT ##################
## DATA EXPLORER TAB:
output$data <- DT::renderDataTable({
if (input$percents){
DT::datatable(dat_subset()[!(colnames(dat_subset()) %in% c("int7rn4l1d"))],
rownames = FALSE,
selection = list(target = 'row+column'),
caption = 'Monte Carlo Simulation results datatable:',
options = list(saveState = TRUE)) %>%
formatPercentage(input$response, digits = ndigits)
} else {
DT::datatable(dat_subset()[!(colnames(dat_subset()) %in% c("int7rn4l1d"))],
rownames = FALSE,
selection = list(target = 'row+column'),
caption = 'Monte Carlo Simulation results datatable:',
options = list(saveState = TRUE))
}
})
## ANOVA TAB:
output$models <- renderPrint({
if (is.null(input$mod_outcome) | is.null(input$mod_filters)){
return(cat("Please select at least one design and one outcome variable.\n"))
}
# Generate univariate and multivariate formulas:
if (length(input$mod_outcome) == 1){
fm <- paste0(input$mod_outcome, "~",
paste(input$mod_filters, collapse = "+"))
} else {
fm <- paste0('cbind(',
paste(input$mod_outcome, collapse = ','),
') ~ ',
paste(input$mod_filters, collapse = '+'))
}
# Incorporate interactions:
if (length(input$mod_filters) > 1 & input$all_int == TRUE){
fm <- gsub("\\+", "*", fm)
}
data <- dat_subset()
mod <- do.call("lm",
list(formula = as.formula(fm),
data = as.name("data")))
cat(paste0("Model formula: ", fm,
"\nThis is based upon ", nrow(data),
" of the ", ncases, " rows found in the original dataframe.\n\n"))
print(Anova(mod))
})
## VISUALIZATION TAB:
output$plot <- renderPlot({
if (is.null(input$graphic)){
return(cat("Please select the type of graphic to generate from the sidebar.\n"))
}
plot(x = rnorm(100), y = rnorm(100))
})
}
runApp(list(ui = ui, server = server), launch.browser = browser)
}
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
?conditionalPanel
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
str(dat)
dat <- dat_subset()[!(colnames(dat_subset()) %in% c("int7rn4l1d"))]
input$dvars
dvars
input$design
tableShade(dat, table_vars = input$design)
input$design
tableShade
dat <- convert_df(dat)
str(dat)
tableShade(dat, table_vars = input$design)
library(SimDisplay)
shinyMCSS()
?reactivePlot
library(SimDisplay)
?reactivePlot
shinyMCSS()
?plotOutput
?print
library(SimDisplay)
shinyMCSS()
tableShade
library(SimDisplay)
shinyMCSS()
data(Brown1974)
tableShade("Brown1974")
tableShade("Brown1974", table_vars = c("distribution", "sample_size"))
names(Brown1974)
tableShade("Brown1974", table_vars = c("distribution", "sample_size"))
?tableShade
tableShade(Brown1974, table_vars = c("distribution", "var_ratio"))
library(SimDisplay)
shinyMCSS()
traceback()
library(SimDisplay)
shinyMCSS()
?slider
?sliderInput
?brewer.pal
brewer.pal.info
in0 <- brewer.pal.info
rownames(in0)
rownames(brewer.pal.info)
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
options(warn=2)
shinyMCSS()
?textInput
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
?ggsave
?ggplot2
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
?renderPlot
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
?switch
shinyMCSS()
rownames(brewer.pal.info)
length(rownames(brewer.pal.info))
rownames(brewer.pal.info)[18:35]
tableShade
library(SimDisplay)
shinyMCSS()
simTablePlot
simTableplot
library(SimDisplay)
shinyMCSS()
?tableplot
?simTableplot
library(SimDisplay)
shinyMCSS()
convert_df
tableShade
?facet_wrap
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
simTableplot
shadeTable
tableShade
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
wt <- 100
wt <- "auto"
wtf
wt
?'if'
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
?print
?print.ggplot
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
?heplot
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
?sliderInput
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
?numericInput
library(SimDisplay)
?formatRound
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
shinyMCSS(browser=FALSE)
library(SimDisplay)
shinyMCSS()
library("DT")
citation("DT")
devtools::use_package()
?devtools::use_package()
?devtools::use_package("DT")
devtools::use_package("DT")
devtools::use_package("candisc")
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots", "candisc", "RColorBrewer", "DT")
!requireNamespace(pcks, quietly = TRUE)
requireNamespace(pcks, quietly = TRUE)
?requireNamespace
!requireNamespace(pcks[[1]], quietly = TRUE)
!requireNamespace(pcks[[2]], quietly = TRUE)
!requireNamespace(pcks[[3]], quietly = TRUE)
pcks[[8]] < "fgf"
pcks[[8]] <- "fgf"
!requireNamespace(pcks[[8]], quietly = TRUE)
(!requireNamespace(pcks, quietly = TRUE))
lapply(pcks, requireNamespace)
unlist(lapply(pcks, requireNamespace, quietly=TRUE)
)
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT")
check <- unlist(lapply(pcks, !requireNamespace, quietly=TRUE))
check
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT")
check <- unlist(lapply(pcks, requireNamespace, quietly=TRUE))
check
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT")
cbind(pcks,check)
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT", "fdgff")
check <- unlist(lapply(pcks, requireNamespace, quietly=TRUE))
reqs <- cbind(pcks, as.logical(check))
require(package)
reqs
reqs <- cbind(pcks, present = as.logical(check))
reqs
reqs <- data.frame(cbind(pcks, present = as.logical(check)))
reqs
reqs$pcks[reqs$present == FALSE, 1]
reqs[reqs$present == FALSE, 1]
paste(reqs[reqs$present == FALSE, 1])
paste0("Please install the following package(s) before running shinyMCSS():", missingpcks)
missingpcks <- paste(reqs[reqs$present == FALSE, 1])
paste0("Please install the following package(s) before running shinyMCSS():", missingpcks)
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT", "fdgff", "redgfgdf")
check <- unlist(lapply(pcks, requireNamespace, quietly=TRUE))
reqs <- data.frame(cbind(pcks, present = as.logical(check)))
missingpcks <- paste(reqs[reqs$present == FALSE, 1])
paste0("Please install the following package(s) before running shinyMCSS(): ", missingpcks)
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT", "fdgff")
check <- unlist(lapply(pcks, requireNamespace, quietly=TRUE))
reqs <- data.frame(cbind(pcks, present = as.logical(check)))
missingpcks <- paste(reqs[reqs$present == FALSE, 1], collapse = " ")
missingpcks
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT", "fdgff", "rfgdfg")
check <- unlist(lapply(pcks, requireNamespace, quietly=TRUE))
reqs <- data.frame(cbind(pcks, present = as.logical(check)))
missingpcks <- paste(reqs[reqs$present == FALSE, 1], collapse = " ")
missingpcks
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT", "fdgff", "rfgdfg")
check <- unlist(lapply(pcks, requireNamespace, quietly=TRUE))
reqs <- data.frame(cbind(pcks, present = as.logical(check)))
missingpcks <- paste(reqs[reqs$present == FALSE, 1], collapse = ", ")
missingpcks
paste0("Please install the following package(s) before running shinyMCSS(): ", missingpcks)
pcks <- c("shiny", "shinydashboard", "car", "ggplot2", "heplots",
"candisc", "RColorBrewer", "DT")
check <- unlist(lapply(pcks, requireNamespace, quietly=TRUE))
reqs <- data.frame(cbind(pcks, present = as.logical(check)))
missingpcks <- paste(reqs[reqs$present == FALSE, 1], collapse = ", ")
paste0("Please install the following package(s) before running shinyMCSS(): ", missingpcks)
length(missing)
length(missingpcks)
sum(reqs$present == FALSE)
library(SimDisplay)
remove.packages("candisc")
shinyMCSS()
install.packages("candisc")
library(SimDisplay)
?library
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
?installed.packages
list.of.packages <- c("methods", "reshape2", "xtable", "grid",
"shiny", "ggplot2", "plyr", "tableplot",
"RColorBrewer", "shinydashboard", "car",
"heplots", "DT", "candisc")
list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
install_suggests <- function(){
list.of.packages <- c("methods", "reshape2", "xtable", "grid",
"shiny", "ggplot2", "plyr", "tableplot",
"RColorBrewer", "shinydashboard", "car",
"heplots", "DT", "candisc")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
}
install_suggests()
install_suggests <- function(){
list.of.packages <- c("methods", "reshape2", "xtable", "grid",
"shiny", "ggplot2", "plyr", "tableplot",
"RColorBrewer", "shinydashboard", "car",
"heplots", "DT", "candisc", "billboarder")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
}
install_suggests()
library(SimDisplay)
list.of.packages
library(SimDisplay)
?suppressMessages
?require
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDesign)
?SimAnova
data(BF_sim)
SimAnova(~ groups_equal * distribution, BF_sim, subset = var_ratio == 1)
vals <- names(BF_sim)
vals
SimAnova(cbind(alpha.05.F, alpha.05.Jacknife, alpha.05.Layard) ~ groups_equal + distribution, BF_sim, subset = var_ratio == 1)
SimAnova
SimAnova(~ groups_equal * distribution, BF_sim, subset = var_ratio == 1)
Anova(mod)
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
library(SimDisplay)
shinyMCSS()
fm <- paste0("~",
paste(input$mod_filters, collapse = "+"))
fm
cat(paste0("The following univariate analyses are based upon ", nrow(data),
" of the ", ncases, " rows found in the original dataframe.\n\n"))
do.call("SimAnova",
list(formula = as.formula(fm),
dat = as.name("data"),
rates = input$rates))
View(str(data))
str(data)
attributes(data)
attributes(data)$design_names$design
View(attributes(data)$design_names$design)
mod$filters
input$mod_filters
View(input$mod_filters)
attributes(data)$design_names$design <- input$mod_filters
do.call("SimAnova",
list(formula = as.formula(fm),
dat = as.name("data"),
rates = input$rates))
SimAnova(fm, data)
SimAnova
SimAnova
?qlogis
library(SimDisplay)
shinyMCSS()
data[,input$mod_outcome]
View(data[,input$mod_outcome])
View(qlogis(data[,input$mod_outcome]))
mod_outcome
(input$mod_outcome)
cat(input$mod_outcome)
mod$outcome <- c("F", "Layard")
outcome <- c("F", "Layard")
View(qlogis(data[,outcome]))
View(qlogis(data[,outcome]))
qlogis(data[,outcome])
sapply(data[,outcome], function(x) qlogis(x))
View(sapply(data[,outcome], function(x) qlogis(x)))
library(SimDisplay)
shinyMCSS()
shinyMCSS()
library(SimDisplay)
shinyMCSS()
shinyMCSS()
library(SimDisplay)
shinyMCSS()
shinyMCSS()
library(SimDisplay)
as.data.frame.SimDesign
?as.data.frame.SimDesign
method(as.data.frame)
methods(as.data.frame)
SimDesign:::as.data.frame.SimDesign()
SimDesign:::as.data.frame.SimDesign
simplifyDf
library(SimDisplay)
library(SimDisplay)
data("Hallgren2013")
TypeI <- subset(Hallgren2013, a == 0 & b == 0 & cp == 0)
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).")
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).", digits = 99)
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).", digits = 9)
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).", digits = 8)
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).", digits = 6)
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).", digits = 4)
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).", digits = 3)
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).", digits = 2)
simTable(TypeI, caption = "Type I error rates for Hallgren (2013).", digits = 3)
library(SimDisplay)
devtools::install_github("mattsigal/SimDisplay")
simTable
library(SimDisplay)
simTable
simTable
library(SimDisplay)
simTable
?simTable
library(SimDisplay)
library(SimDisplay)
data(Brown1974)
Brown1974$REPLICATIONS <- Brown1974$SIM_TIME <- Brown1974$COMPLETED <- Brown1974$SEED <- NULL
TypeI <- subset(Brown1974, var_ratio == 1) # Separate type I error rate conditions
Power <- subset(Brown1974, var_ratio != 1) # from power conditions
simTable(TypeI)
simTable(TypeI, by = 'sample_size')
simTable(TypeI, by = 'sample_size', hide = 'var_ratio')
?reshape2
??reshape2
library(SimDisplay)
library(SimDisplay)
